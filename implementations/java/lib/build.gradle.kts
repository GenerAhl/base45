/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

import java.io.IOException
import java.nio.file.Files
import java.nio.file.Paths
import java.util.*

// --- estimate versions from "versions.properties"
// Note: File "versions.properties" is updated a gradle plugin using task "refreshVersions"
var verCheckstyle = ""
var verJacoco = ""
var verPmd = ""
try {
    Files.newInputStream(Paths.get("${rootProject.projectDir}/versions.properties")).use { fis ->
        val prop = Properties()
        prop.load(fis)
        verCheckstyle = prop.getProperty("version.com.puppycrawl.tools..checkstyle", "unknown")
        verJacoco = prop.getProperty("version.org.jacoco..org.jacoco.agent")
        verPmd = prop.getProperty("version.net.sourceforge.pmd..pmd-java", "unknown")
    }
    // System.out.println("verCheckStyle := " + verCheckstyle)
} catch (e: IOException) {
    e.printStackTrace()
} // end catch(IOException)
// ... versions known

// section for loading plugins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
plugins {
  id("checkstyle")
  id("com.github.spotbugs")
  id("jacoco")
  id("java-library")
  id("pmd")
} // end plugins ___________________________________________________________________________________

/*
// Note 1: This block is necessary for task "refreshVersions".
// Note 2: This block is not necessary for building the project by gradle.
// Deprecated on 2021-01-20 with gradle version 6.8.
// Instead block "dependencyResolutionManagement" in settings.gradle.kts covers this information.
repositories { //  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  gradlePluginPortal()
  mavenCentral()
  maven {
    url = uri("https://v2202005121345117714.megasrv.de/maven.repository")
  }
} // end repositories ___________________________________________________________________________ */

// set JavaVersion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
} // end JavaVersion _______________________________________________________________________________

gradle.taskGraph.whenReady { //  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    // set flag indicating whether a release is build
    val flagRelease = hasTask(":release") || hasTask(":" + project.name + ":release")

    // begin checkstyle configuration
    checkstyle {
        configFile = file(
                "${rootProject.projectDir}/config/afi_google_checks_" + verCheckstyle + ".xml"
        )
        isIgnoreFailures = !flagRelease // don't ignore errors and warnings for releases
    }

    tasks.withType<Checkstyle>().configureEach {
        reports {
            xml.isEnabled = false
            html.isEnabled = true
        }
    }
    // end checkstyle configuration

    // begin jacoco configuration
    jacoco {
        toolVersion = verJacoco
    } // end jacoco

    tasks {
        jacocoTestCoverageVerification {
            val jacocoLimit = if (flagRelease) "1.0" else "0.1"
            // For defining rules see e.g.: https://reflectoring.io/jacoco/
            violationRules {
                rule {
                    limit {
                        counter = "INSTRUCTION"
                        value = "COVEREDRATIO"
                        minimum = jacocoLimit.toBigDecimal()
                    }
                }
                rule {
                    limit {
                        counter = "BRANCH"
                        value = "COVEREDRATIO"
                        minimum = jacocoLimit.toBigDecimal()
                    }
                }
            }
        }
    } // end tasks
    // end   jacoco configuration

    // begin pmd configuration
    pmd {
        toolVersion = verPmd
        ruleSets = mutableListOf<String>()
        ruleSetFiles = files(
                "${rootProject.projectDir}/config/afi_quickstart_" + verPmd + ".xml"
        )
        isIgnoreFailures = !flagRelease // don't ignore errors and warnings for releases
    }

    tasks.withType<Pmd>().configureEach {
        reports {
            xml.isEnabled = false
            html.isEnabled = true
        }
    }
    // end pmd configuration

    // begin spotbugs configuration
    spotbugs {
        setEffort("max")      // min, less, more, max
        setReportLevel("low") // high, medium, low
        ignoreFailures.set(!flagRelease)
    } // end spotbugs configuration
    // end spotbugs configuration
} // end gradle.taskGraph.whenReady ________________________________________________________________

// configure dependencies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
dependencies {
    // dependencies for plugins
    checkstyle("com.puppycrawl.tools:checkstyle:_")
    jacocoAnt("org.jacoco:org.jacoco.ant:_")
    jacocoAgent("org.jacoco:org.jacoco.agent:_")
    pmd("net.sourceforge.pmd:pmd-java:_")

    // null-annotations, e.g. in package-info.java
    api("com.github.spotbugs:spotbugs-annotations:_")

    // Use JUnit Jupiter API for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api:_")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
} // end dependencies ______________________________________________________________________________
// begin task  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
tasks {
    // force Gradle to use an appropriate compile option such that source-files are treated UTF-8
    withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    jacocoTestCoverageVerification {
        // This task probably fails during software development because of low coverage.
        // It seems useful that all other checks are performed before the build fails.
        shouldRunAfter(
                "checkstyleMain", "checkstyleTest",
                "pmdMain", "pmdTest",
                "spotbugsMain", "spotbugsTest"
        )
    } // end jacocoTestCoverageVerification

    check { dependsOn("jacocoTestCoverageVerification") }
} // end   task ____________________________________________________________________________________

// section configuring test tasks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
tasks.test {
    useJUnitPlatform()

    testLogging {
        events("PASSED", "FAILED", "SKIPPED")
    }

    // ensures that a report is generated immediately after test-task completes
    finalizedBy("jacocoTestReport")
} // end test tasks ________________________________________________________________________________
